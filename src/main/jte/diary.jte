@param com.shevchenko.mentalHealthSupport.models.User currentUser = null
@param java.util.List<com.shevchenko.mentalHealthSupport.models.Diary> diaryEntries = java.util.Collections.emptyList()
@param java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")

@template.layout(
title = "–û—Å–æ–±–∏—Å—Ç–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫",
description = "–í–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –µ–º–æ—Ü—ñ–π–Ω–æ–≥–æ —Å—Ç–∞–Ω—É",
showHero = false,
content = @`
    <div class="diary-container">
        <h1 class="diary-title">–û—Å–æ–±–∏—Å—Ç–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫</h1>
        <p class="diary-description">–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —Å–≤–æ—ó –¥—É–º–∫–∏, –ø–æ—á—É—Ç—Ç—è —Ç–∞ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ —Å–≤—ñ–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω.</p>

        @if(currentUser == null)
            <div class="auth-prompt">
                <p>–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ <a href="/login?redirect=/diary">—É–≤—ñ–π—Ç–∏</a> –≤ —Å–∏—Å—Ç–µ–º—É –∞–±–æ <a href="/register">–∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å</a>.</p>
            </div>
        @else
            <div class="diary-emotions">
                <h2>–Ø–∫ –≤–∏ –ø–æ—á—É–≤–∞—î—Ç–µ—Å—å —Å—å–æ–≥–æ–¥–Ω—ñ?</h2>
                <form action="/diary" method="post" class="emotion-form">
                    <div class="mood-selector">
                        <label>
                            <input type="radio" name="mood" value="great" required>
                            <span class="mood-emoji">üòÑ</span>
                            <span class="mood-text">–ß—É–¥–æ–≤–æ</span>
                        </label>
                        <label>
                            <input type="radio" name="mood" value="good">
                            <span class="mood-emoji">üôÇ</span>
                            <span class="mood-text">–î–æ–±—Ä–µ</span>
                        </label>
                        <label>
                            <input type="radio" name="mood" value="neutral">
                            <span class="mood-emoji">üòê</span>
                            <span class="mood-text">–ù–æ—Ä–º–∞–ª—å–Ω–æ</span>
                        </label>
                        <label>
                            <input type="radio" name="mood" value="bad">
                            <span class="mood-emoji">üòî</span>
                            <span class="mood-text">–ü–æ–≥–∞–Ω–æ</span>
                        </label>
                        <label>
                            <input type="radio" name="mood" value="awful">
                            <span class="mood-emoji">üòû</span>
                            <span class="mood-text">–î—É–∂–µ –ø–æ–≥–∞–Ω–æ</span>
                        </label>
                    </div>

                    <div class="diary-input">
                        <label for="diaryText">–ó–∞–ø–∏—Å–∞—Ç–∏ –¥—É–º–∫–∏ —Ç–∞ –ø–æ—á—É—Ç—Ç—è:</label>
                        <textarea id="diaryText" name="content" rows="5" placeholder="–©–æ –≤–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ? –©–æ —Å—Ç–∞–ª–æ—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ?"></textarea>

                        <div class="tags-selector">
                            <label>–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–≥–∏:</label>
                            <div class="tags-options">
                                <label><input type="checkbox" name="tags" value="anxiety"> –¢—Ä–∏–≤–æ–≥–∞</label>
                                <label><input type="checkbox" name="tags" value="happiness"> –†–∞–¥—ñ—Å—Ç—å</label>
                                <label><input type="checkbox" name="tags" value="stress"> –°—Ç—Ä–µ—Å</label>
                                <label><input type="checkbox" name="tags" value="relaxation"> –†–æ–∑—Å–ª–∞–±–ª–µ–Ω–Ω—è</label>
                                <label><input type="checkbox" name="tags" value="anger"> –ì–Ω—ñ–≤</label>
                                <label><input type="checkbox" name="tags" value="meditation"> –ú–µ–¥–∏—Ç–∞—Ü—ñ—è</label>
                            </div>
                        </div>

                        <div class="privacy-option">
                            <label>
                                <input type="checkbox" name="isPrivate" value="true" checked>
                                –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∑–∞–ø–∏—Å (–≤–∏–¥–Ω–æ —Ç—ñ–ª—å–∫–∏ –≤–∞–º)
                            </label>
                        </div>

                        <button type="submit" class="btn diary-submit">–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–ø–∏—Å</button>
                    </div>
                </form>
            </div>

            <div class="diary-history">
                <h2>–í–∞—à—ñ –∑–∞–ø–∏—Å–∏</h2>

                <div class="diary-filters">
                    <label>
                        <span>–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ –∑–∞:</span>
                        <select id="timeFilter" onchange="filterEntries()">
                            <option value="all">–£—Å—ñ –∑–∞–ø–∏—Å–∏</option>
                            <option value="week">–û—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å</option>
                            <option value="month">–û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å</option>
                            <option value="year">–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫</option>
                        </select>
                    </label>

                    <label>
                        <span>–§—ñ–ª—å—Ç—Ä –ø–æ –Ω–∞—Å—Ç—Ä–æ—é:</span>
                        <select id="moodFilter" onchange="filterEntries()">
                            <option value="all">–£—Å—ñ –Ω–∞—Å—Ç—Ä–æ—ó</option>
                            <option value="great">–ß—É–¥–æ–≤–æ</option>
                            <option value="good">–î–æ–±—Ä–µ</option>
                            <option value="neutral">–ù–æ—Ä–º–∞–ª—å–Ω–æ</option>
                            <option value="bad">–ü–æ–≥–∞–Ω–æ</option>
                            <option value="awful">–î—É–∂–µ –ø–æ–≥–∞–Ω–æ</option>
                        </select>
                    </label>
                </div>


                <div class="diary-entries">
                    @if(diaryEntries.isEmpty())
                        <p class="no-entries">–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –≤ —â–æ–¥–µ–Ω–Ω–∏–∫—É. –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å!</p>
                    @else
                        @for(var entry : diaryEntries)
                            <div class="diary-entry" data-mood="${entry.getMood()}" data-date="${entry.getCreatedAt().format(formatter)}">
                                <div class="entry-header">
                                        <span class="entry-mood">
                                            @if(entry.getMood().equals("great") )
                                                <span class="entry-mood" data-mood="great">üòÑ</span>
                                            @elseif(entry.getMood().equals("good"))
                                                <span class="entry-mood" data-mood="good">üôÇ</span>
                                            @elseif(entry.getMood().equals("neutral"))
                                                <span class="entry-mood" data-mood="neutral">üòê</span>
                                            @elseif(entry.getMood().equals("bad"))
                                                <span class="entry-mood" data-mood="bad">üòî</span>
                                            @elseif(entry.getMood().equals("awful"))
                                                <span class="entry-mood" data-mood="awful">üòû</span>
                                            @else
                                                <span class="entry-mood" data-mood="neutral">üòê</span>
                                            @endif

                                        </span>
                                    <span class="entry-date">${entry.getCreatedAt().format(formatter)}</span>
                                    <span class="entry-privacy">${entry.isPrivateStatus ? "–ü—Ä–∏–≤–∞—Ç–Ω–∏–π" : "–ü—É–±–ª—ñ—á–Ω–∏–π"}</span>
                                </div>
                                <div class="entry-content">
                                    <p>${entry.getContent()}</p>
                                </div>
                                @if(!entry.getTags().isEmpty())
                                    <div class="entry-tags">
                                        @for(var tag : entry.getTags())
                                            <span class="tag">${tag.getName()}</span>
                                        @endfor
                                    </div>
                                @endif
                                <div class="entry-actions">
                                    <a href="/diary/edit/${entry.getId()}" class="btn btn-small">–†–µ–¥–∞–≥—É–≤–∞—Ç–∏</a>
                                    <a href="/diary/delete/${entry.getId()}" class="btn btn-small btn-danger" onclick="return confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å?')">–í–∏–¥–∞–ª–∏—Ç–∏</a>
                                </div>
                            </div>
                        @endfor
                    @endif
                </div>
            </div>
        @endif
    </div>

    <style>
        .diary-container {
            background-color: white;
            border-radius: 8px;
            padding: 2rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .diary-title {
            color: var(--primary);
            margin-bottom: 1rem;
            font-size: 2rem;
        }

        .diary-description {
            color: #666;
            margin-bottom: 2rem;
        }

        .auth-prompt {
            background-color: var(--light);
            padding: 2rem;
            border-radius: 8px;
            text-align: center;
            margin: 2rem 0;
        }

        .auth-prompt a {
            color: var(--primary);
            font-weight: bold;
            text-decoration: none;
        }

        .diary-emotions {
            margin-bottom: 2rem;
        }

        .mood-selector {
            display: flex;
            justify-content: space-between;
            margin: 1.5rem 0;
            flex-wrap: wrap;
        }

        .mood-selector label {
            display: flex;
            flex-direction: column;
            align-items: center;
            cursor: pointer;
            padding: 1rem;
            border-radius: 8px;
            transition: background-color 0.3s;
        }

        .mood-selector label:hover {
            background-color: #f0f0f0;
        }

        .mood-selector input[type="radio"] {
            display: none;
        }

        .mood-selector input[type="radio"]:checked + .mood-emoji {
            transform: scale(1.2);
        }

        .mood-emoji {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            transition: transform 0.3s;
        }

        .mood-text {
            font-size: 0.9rem;
        }

        .diary-input {
            background-color: var(--light);
            padding: 1.5rem;
            border-radius: 8px;
        }

        .diary-input label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }

        .diary-input textarea {
            width: 100%;
            padding: 1rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
            margin-bottom: 1rem;
            font-size: 1rem;
        }

        .tags-selector {
            margin: 1rem 0;
        }

        .tags-options {
            display: flex;
            flex-wrap: wrap;
            gap: 0.8rem;
            margin-top: 0.5rem;
        }

        .tags-options label {
            font-weight: normal;
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }

        .privacy-option {
            margin: 1rem 0;
        }

        .diary-submit {
            background-color: var(--primary);
            margin-top: 1rem;
            border: none;
            cursor: pointer;
            font-size: 1rem;
        }

        .diary-submit:hover {
            background-color: var(--secondary);
        }

        .diary-history {
            margin-top: 3rem;
        }

        .diary-filters {
            display: flex;
            justify-content: space-between;
            margin: 1.5rem 0;
            padding: 1rem;
            background-color: var(--light);
            border-radius: 8px;
            flex-wrap: wrap;
        }

        .diary-filters label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .diary-filters select {
            padding: 0.5rem;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        .mood-chart {
            background-color: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            margin-bottom: 2rem;
        }

        .chart-container {
            height: 200px;
            width: 100%;
            background-color: var(--light);
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 1rem;
        }

        .chart-placeholder {
            color: #999;
            font-style: italic;
        }

        .diary-entries {
            display: grid;
            gap: 1.5rem;
        }

        .no-entries {
            text-align: center;
            padding: 2rem;
            background-color: var(--light);
            border-radius: 8px;
            font-style: italic;
            color: #666;
        }

        .diary-entry {
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
        }

        .entry-header {
            display: flex;
            padding: 1rem;
            background-color: var(--light);
            align-items: center;
            justify-content: space-between;
        }

        .entry-mood {
            font-size: 1.5rem;
        }

        .entry-date {
            font-size: 0.9rem;
            color: #666;
        }

        .entry-privacy {
            font-size: 0.8rem;
            background-color: #ddd;
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
        }

        .entry-content {
            padding: 1.5rem;
            background-color: white;
        }

        .entry-tags {
            padding: 0 1.5rem 1rem;
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .tag {
            background-color: var(--secondary);
            color: white;
            padding: 0.2rem 0.6rem;
            border-radius: 20px;
            font-size: 0.8rem;
        }

        .entry-actions {
            padding: 1rem 1.5rem;
            background-color: #f9f9f9;
            display: flex;
            gap: 1rem;
        }

        .btn-small {
            padding: 0.3rem 0.8rem;
            font-size: 0.9rem;
        }

        .btn-danger {
            background-color: var(--danger);
        }

        @media (max-width: 768px) {
            .mood-selector {
                justify-content: center;
                gap: 1rem;
            }

            .diary-filters {
                flex-direction: column;
                gap: 1rem;
            }
        }
        .mood-chart {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        .mood-chart h3 {
            color: #3498db;
            margin-top: 0;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
            text-align: center;
        }
        .chart-container {
            height: 300px;
            margin-top: 20px;
            position: relative;
        }
    </style>

    <script>
        function filterEntries() {
            const timeFilter = document.getElementById('timeFilter').value;
            const moodFilter = document.getElementById('moodFilter').value;

            const entries = document.querySelectorAll('.diary-entry');
            const now = new Date();

            const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
            const oneYearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());

            entries.forEach(entry => {
                const mood = entry.dataset.mood;
                const dateStr = entry.dataset.date;

                let date;
                try {
                    // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
                    const [datePart, timePart] = dateStr.split(' ');
                    const [day, month, year] = datePart.split('.');
                    const [hours, minutes] = timePart ? timePart.split(':') : ['0', '0'];

                    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç Date (–º—ñ—Å—è—Ü—ñ –≤ JavaScript –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 0)
                    date = new Date(
                        parseInt(year),
                        parseInt(month) - 1,
                        parseInt(day),
                        parseInt(hours),
                        parseInt(minutes)
                    );

                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞—Ç–∏
                    if (isNaN(date.getTime())) {
                        console.error('Invalid date constructed from:', dateStr);
                        date = new Date(0); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—É –¥–∞—Ç—É, —â–æ–± –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤ —á–∞—Å–æ–≤–∏–π —Ñ—ñ–ª—å—Ç—Ä
                    }
                } catch (error) {
                    console.error('Error parsing date:', dateStr, error);
                    date = new Date(0);
                }

                let showByTime = true;
                if (timeFilter === 'week' && date < oneWeekAgo) {
                    showByTime = false;
                } else if (timeFilter === 'month' && date < oneMonthAgo) {
                    showByTime = false;
                } else if (timeFilter === 'year' && date < oneYearAgo) {
                    showByTime = false;
                }

                const showByMood = moodFilter === 'all' || mood === moodFilter;

                entry.style.display = (showByTime && showByMood) ? 'block' : 'none';
            });
        }

    </script>
`
)